How to use it
=============
In order to use COCOMA framework experimenter creates an emulation using XML language(see below Examples section). Emulation should contain all the neccessary information 
about duration, magnitude and required resource usage. Once XML document is received by COCOMA, the framework will automatically schedule and execute 
required workload on the chosen resource(-s) such as CPU, IO, Memory and/or Network.   

Installation
------------
The framework is designed to run on GNU/Linux and released in *.deb* package only.
Once you have downloaded latest COCOMA version install it by running:

``dpkg -i cocoma_X.X-X_all.deb``

The application will be installed to folder *"/usr/share/pyshared/cocoma"*. All the additional required programs and libraries will be downloaded and installed on the fly if missing.
to check check if it was installed correctly run:

``ccmsh -v``  


Starting of Components
----------------------
To avail full functionality of COCOMA two daemons need to be started: 

 * Scheduler daemon
 * API Daemon (optional if REST API functionality is required)

**Scheduler daemon** - runs on the background and executes workload with differential parameters at the time defined in the emulation properties.
to start scheduler use command:

``ccmsh --start scheduler``

*Note: Scheduler needs to be running otherwise nothing will work. Always execute it first!!* 

 
 Command Line Interface(CLI)
 

Or automatically numbered:

 #. Item 1
 #. Item 2

Command Line Arguments
----------------------
blah


REST API Description
--------------------
Words can have *emphasis in italics* or be **bold** and you can
define code samples with back quotes, like when you talk about a 
command: ``sudo`` gives you super user powers! 

This is an example on how to link images:


.. code-block:: xml
   :linenos:
   
            <emulation>
              <emuname>CPU_emu</emuname>
              <emuType>Mix</emuType>
              <emuresourceType>CPU</emuresourceType>
              <emustartTime>now</emustartTime>
              <!--duration in seconds -->
              <emustopTime>15</emustopTime>
              
              <distributions> 
               <name>CPU_distro</name>
               <startTime>0</startTime>
               <!--duration in seconds -->
               <duration>10</duration>
               <granularity>1</granularity>
               <distribution href="/distributions/linear" name="linear" />
               <!--cpu utilization distribution range-->
               <startLoad>10</startLoad>
               <stopLoad>95</stopLoad>
               <emulator href="/emulators/lookbusy" name="lookbusy" />
               <emulator-params>
                    <!--more parameters will be added -->
                    <resourceType>CPU</resourceType>
                    <!--Number of CPUs to keep busy (default: autodetected)-->
                    <ncpus>0</ncpus>
               </emulator-params>
             </distributions>
            
             <log>
               <!-- Use value "1" to enable logging(by default logging is off)  -->
               <enable>1</enable>
               <!-- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  -->
               <frequency>3</frequency>
             </log>              
            </emulation>
