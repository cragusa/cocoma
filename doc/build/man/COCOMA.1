.TH "COCOMA" "1" "April 11, 2013" "1" "COCOMA"
.SH NAME
COCOMA \- man page
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.\" Man page generated from reStructuredText.
.
.sp
COCOMA framework was designed by SAP as part of EU funded BonFIRE project. Task of COCOMA framework is
to create, monitor and control contentious and malicious system workload. By using
this framework experimenters are able to make testing process more accurate
and anticipate various scenarios of cloud infrastructure behaviour, collect and
correlate metrics of the emulated environment with the test results.
.SH INTRODUCTION
.sp
In order to use COCOMA framework experimenter creates an emulation using XML language(see below Examples section). Emulation should contain all the neccessary information
about duration, magnitude and required resource usage. Once XML document is received by COCOMA, the framework will automatically schedule and execute
required workload on the chosen resource(\-s) such as CPU, IO, Memory and/or Network.
.SS Installation
.sp
The framework is designed to run on GNU/Linux and released in \fI.deb\fP package only.
Once you have downloaded latest COCOMA version install it by running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ dpkg \-i cocoma_X.X\-X_all.deb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The application will be installed to folder \fI"/usr/share/pyshared/cocoma"\fP. All the additional required programs and libraries will be downloaded and installed on the fly if missing.
To check check if it was installed correctly run:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ccmsh \-v
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Starting Components
.sp
To avail full functionality of COCOMA two daemons need to be started:
.INDENT 0.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
Scheduler daemon (mandatory)
.IP \(bu 2
API Daemon (optional if REST API functionality is required)
.UNINDENT
.UNINDENT
.UNINDENT
.sp
\fBScheduler daemon\fP \- runs in the background and executes workload with differential parameters at the time defined in the emulation properties.
to start scheduler use command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ccmsh \-\-start scheduler
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Default network interface is \fIeth0\fP, port \fI51889\fP you can change that by adding required interface name and port number at the end:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ccmsh \-\-start scheduler wlan0 5180
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If more detailed output information is needed \fIScheduler\fP also can be started in \fIDEBUG\fP mode:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ccmsh \-\-start scheduler wlan0 5180 debug
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
\fINote: Scheduler needs to be running otherwise nothing will work. Always start it first!!\fP
.sp
\fBAPI daemon\fP \- represents RESTfull web API which exposes COCOMA resources for use over the network. It follows the same startup pattern as the Scheduler:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ccmsh \-\-start api
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
By default web API will try to start using \fIeth0\fP network interface on port \fI5050\fP, but it can be changed by supplying own parameters:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ccmsh \-\-start api wlan0 3030
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The log level will be always same as the \fIScheduler\fP.
.SS Command Line Arguments
.sp
The COCOMA \fBccmsh\fP command line interface has several options:
.INDENT 0.0
.TP
.B \-h, \-\-help
Display help information of the available options
.UNINDENT
.INDENT 0.0
.TP
.B \-v, \-\-version
Display installed version information of COCOMA
.UNINDENT
.INDENT 0.0
.TP
.B \-l, \-\-list <emulation name>
Display list of all emulations that are scheduled or already finished. If emulation name is provided then will it will list information for that specific emulation
.UNINDENT
.INDENT 0.0
.TP
.B \-r, \-\-results <emulation name>
Display list of all emulation results that are scheduled or already finished. If emulation name is provided, then will it will list information for that specific emulation
.UNINDENT
.INDENT 0.0
.TP
.B \-j, \-\-list\-jobs
Querries scheduler for the list of jobs which is to be executed. Gives jobs names and planned execution time
.UNINDENT
.INDENT 0.0
.TP
.B \-i, \-\-dist <distribution name>
Scans \fI"/usr/share/pyshared/cocoma/distributions"\fP folder and displays all available distribution modules.  If distribution name is provided, then it will list help information for that specific distribution
.UNINDENT
.INDENT 0.0
.TP
.B \-e, \-\-emu <emulator name>
Scans \fI"/usr/share/pyshared/cocoma/emulators"\fP folder and displays all available emulator wrapper modules.  If emulator name is provided, then it will list help information for that specific emulator wrapper
.UNINDENT
.INDENT 0.0
.TP
.B \-x, \-\-xml <file name>
If you have a local XML file with emulation parameters, you can use it to create emulation.
.UNINDENT
.INDENT 0.0
.TP
.B \-n, \-\-now (used with \-x option only)
If your local XML file emulation has set start date in past or in future, but you want to override it and start the test right now, without modifying the file, then you can add this option after the file name i.e. \fBccmsh \-x <file name> \-n\fP
.UNINDENT
.INDENT 0.0
.TP
.B \-d, \-\-delete <emulation name>
Deletes specific emulation from the database, logs will remain and will be available until manualy deleted from \fI"/usr/share/pyshared/cocoma/logs"\fP folder
.UNINDENT
.INDENT 0.0
.TP
.B \-p, \-\-purge
Wipe all DB entries, removes all scheduled jobs, logs will remain and will be available until manualy deleted from \fI"/usr/share/pyshared/cocoma/logs"\fP folder
.UNINDENT
.INDENT 0.0
.TP
.B \-\-start <api interface port>, <scheduler interface port>
Launch Scheduler or API daemon by specifying network interface and port number i.e. \fBccmsh \-\-start api eth0 2020\fP or \fBccmsh \-\-start scheduler eth0 3030\fP . By default if interface is not specified then Scheduler daemon will run on \fIeth0\fP port \fI51889\fP and API daemon runs on \fIeth0\fP with port \fI5050\fP.
.UNINDENT
.INDENT 0.0
.TP
.B \-\-stop <api>, <scheduler>
Stop Scheduler or API daemon
.UNINDENT
.INDENT 0.0
.TP
.B \-\-show <api>, <scheduler>
Show OS information on Scheduler or API daemon, displays PID numbers
.UNINDENT
.SS REST API Index
.sp
If the web API daemon has been started successfully, then COCOMA toolkit can be accessed remotely using its RESTfull API.
.sp
The API URIs summary list:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
* /
* /emulations
* /emulations/{name}
* /distributions
* /distributions/{name}
* /emulators
* /emulators/{name}
* /results
* /results/{name}
* /tests
* /tests/{name}
* /logs
* /logs/system
* /logs/emulations
* /logs/emulations/{name}
.ft P
.fi
.UNINDENT
.UNINDENT
.SS REST API Description
.INDENT 0.0
.TP
.B GET\~/
.INDENT 7.0
.TP
.B Title 
root
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
The \fBroot\fP method returns \fIcollection\fP of all the available resources. Example XML response:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<root href="/">
  <version>0.1.1</version>
  <timestamp>1365518303.44</timestamp>
  <link href="/emulations" rel="emulations" type="application/vnd.bonfire+xml"/>
  <link href="/emulators" rel="emulators" type="application/vnd.bonfire+xml"/>
  <link href="/distributions" rel="distributions" type="application/vnd.bonfire+xml"/>
  <link href="/tests" rel="tests" type="application/vnd.bonfire+xml"/>
  <link href="/results" rel="results" type="application/vnd.bonfire+xml"/>
  <link href="/logs" rel="logs" type="application/vnd.bonfire+xml"/>
</root>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/emulations
.INDENT 7.0
.TP
.B Title 
emulations
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
The \fBemulations\fP method returns \fIcollection\fP of all the available emulation resources. Example XML response:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
 <collection href="/emulations" xmlns="http://127.0.0.1/cocoma">
   <items offset="0" total="3">
     <emulation href="/emulations/1\-Emu\-CPU\-RAM\-IO" id="1" name="1\-Emu\-CPU\-RAM\-IO" state="inactive"/>
     <emulation href="/emulations/2\-CPU_EMU" id="2" name="2\-CPU_EMU" state="inactive"/>
     <emulation href="/emulations/3\-CPU_EMU" id="3" name="3\-CPU_EMU" state="inactive"/>
   </items>
   <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
 </collection>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/emulations/\fI{name}\fP
.INDENT 7.0
.TP
.B Path arguments
\fBname\fP \-\- Name of emulation that you want to get more info
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Displays information about emulation by name. The returned \fI200\-OK\fP XML is:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<emulation href="/emulations/1\-Emu\-CPU\-RAM\-IO" xmlns="http://127.0.0.1/cocoma">
  <id>1</id>
  <emulationName>1\-Emu\-CPU\-RAM\-IO</emulationName>
  <emulationType>mix</emulationType>
  <resourceType>mix</resourceType>
  <emuStartTime>2013\-04\-09T13:00:01</emuStartTime>
  <emuStopTime>180</emuStopTime>
  <scheduledJobs>
    <jobsempty>No jobs are scheduled</jobsempty>
  </scheduledJobs>
  <distributions ID="1" name="Distro1">
    <startTime>5</startTime>
    <granularity>3</granularity>
    <duration>30</duration>
    <startload>10</startload>
    <stopload>90</stopload>
  </distributions>
  <distributions ID="2" name="Distro2">
    <startTime>5</startTime>
    <granularity>3</granularity>
    <duration>30</duration>
    <startload>10</startload>
    <stopload>90</stopload>
  </distributions>
  <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
  <link href="/emulations" rel="parent" type="application/vnd.bonfire+xml"/>
</emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The returned \fI404 – Not Found\fP XML is:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<error>Emulation Name: 1\-Emu\-CPU\-RAM\-IO1 not found. Error:too many values to unpack</error>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B POST\~/emulations
.INDENT 7.0
.TP
.B Query params
\fBXML\fP (\fIstring\fP) \-\- Emulation parameters defined via XML as shown in the examples section.
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB201\fP \-\- Emulation was created successfully
.IP \(bu 2
\fB400\fP \-\- Bad Request
.UNINDENT
.UNINDENT
.sp
The returned \fI201\-Created\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<emulation href="/emulations/4\-CPU_EMU" xmlns="http://127.0.0.1/cocoma">
  <ID>4\-CPU_EMU</ID>
  <EmuNotes>OK</EmuNotes>
  <DistroNotes>OK</DistroNotes>
  <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
  <link href="/emulations" rel="parent" type="application/vnd.bonfire+xml"/>
</emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The returned \fI400 – Bad Request\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<error>XML is not well formed Error: syntax error: line 1, column 0</error>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/emulators
.INDENT 7.0
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Displays emulators list.
The returned \fI200\- OK\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<collection href="/emulators" xmlns="http://127.0.0.1/cocoma">
  <items offset="0" total="3">
    <emulator href="/emulators/lookbusy" name="lookbusy"/>
    <emulator href="/emulators/stressapptest" name="stressapptest"/>
    <emulator href="/emulators/iperf" name="iperf"/>
  </items>
  <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
</collection>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/emulators/\fI{name}\fP
.INDENT 7.0
.TP
.B Path arguments
\fBname\fP \-\- Name of emulator that you want to get more info
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Displays information about emulator by name.
The returned \fI200\- OK\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<emulator href="/emulator/lookbusy" xmlns="http://127.0.0.1/cocoma">
  <info>
    Emulator lookbusy can be used for following resources:
    1)Loads CPU with parameters:
      ncpus \- Number of CPUs to keep busy (default: autodetected)

    2)Loads Memory(MEM) with parameters:
      memSleep \- Time to sleep between iterations, in usec (default 1000)

    3)Changing size of files to use during IO with parameters:
      ioBlockSize \- Size of blocks to use for I/O in MB
      ioSleep \- Time to sleep between iterations, in msec (default 100)


    XML block example:
    &lt;emulator\-params&gt;
        &lt;resourceType&gt;CPU&lt;/resourceType&gt;
        &lt;ncpus&gt;0&lt;/ncpus&gt;
    &lt;/emulator\-params&gt;

    </info>
  <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
  <link href="/emulators" rel="parent" type="application/vnd.bonfire+xml"/>
</emulator>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/distributions
.INDENT 7.0
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Displays distributions list.
The returned \fI200\- OK\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<collection href="/distributions" xmlns="http://127.0.0.1/cocoma">
  <items offset="0" total="3">
    <distribution href="/distributions/linear" name="linear"/>
    <distribution href="/distributions/linear_incr" name="linear_incr"/>
    <distribution href="/distributions/trapezoidal" name="trapezoidal"/>
  </items>
  <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
</collection>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/distributions/\fI{name}\fP
.INDENT 7.0
.TP
.B Path arguments
\fBname\fP \-\- Name of distributions that you want to get more info
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Displays information about distributions by name.
The returned \fI200\- OK\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<distribution href="/distributions/linear" xmlns="http://127.0.0.1/cocoma">
  <info>Linear distribution takes in start and stop load parameters and gradually increasing resource workload. Can be used with CPU,MEM,IO,NET resource types.</info>
  <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
  <link href="/distributions" rel="parent" type="application/vnd.bonfire+xml"/>
</distribution>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/tests
.INDENT 7.0
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Displays tests list.
The returned \fI200\- OK\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<collection href="/tests" xmlns="http://127.0.0.1/cocoma">
  <items offset="0" total="20">
    <test href="/tests/01\-CPU\-Linear\-Lookbusy_10\-95.xml" name="01\-CPU\-Linear\-Lookbusy_10\-95.xml"/>
    <test href="/tests/03\-NET\-Linear_incr\-Iperf\-100\-1000.xml" name="03\-NET\-Linear_incr\-Iperf\-100\-1000.xml"/>
    <test href="/tests/02\-IO\-Linear\-Stressapptest_1\-10.xml" name="02\-IO\-Linear\-Stressapptest_1\-10.xml"/>
    <test href="/tests/02\-IO\-Linear_incr\-Stressapptest_1\-10.xml" name="02\-IO\-Linear_incr\-Stressapptest_1\-10.xml"/>
    <test href="/tests/02\-MEM\-Linear_incr\-Stressapptest_100\-1000.xml" name="02\-MEM\-Linear_incr\-Stressapptest_100\-1000.xml"/>
    <test href="/tests/01\-CPU\-Trapezoidal\-Lookbusy_10\-95.xml" name="01\-CPU\-Trapezoidal\-Lookbusy_10\-95.xml"/>
    <test href="/tests/01\-IO\-Trapezoidal\-Lookbusy_1\-10.xml" name="01\-IO\-Trapezoidal\-Lookbusy_1\-10.xml"/>
    <test href="/tests/01\-NET_TEST.xml" name="01\-NET_TEST.xml"/>
    <test href="/tests/03\-MEM\-500\-1000MB\-overlap.xml" name="03\-MEM\-500\-1000MB\-overlap.xml"/>
    <test href="/tests/01\-CPU\-Linear_incr\-Lookbusy_10\-95.xml" name="01\-CPU\-Linear_incr\-Lookbusy_10\-95.xml"/>
    <test href="/tests/01\-IO\-Linear_incr\-Lookbusy_1\-10.xml" name="01\-IO\-Linear_incr\-Lookbusy_1\-10.xml"/>
    <test href="/tests/02\-IO\-Trapezoidal\-Stressapptest_1\-10.xml" name="02\-IO\-Trapezoidal\-Stressapptest_1\-10.xml"/>
    <test href="/tests/03\-CPU\-opposite.xml" name="03\-CPU\-opposite.xml"/>
    <test href="/tests/01\-MEM\-Linear_incr\-Lookbusy_100\-1000.xml" name="01\-MEM\-Linear_incr\-Lookbusy_100\-1000.xml"/>
    <test href="/tests/03\-MEM\-500\-1000MB.xml" name="03\-MEM\-500\-1000MB.xml"/>
    <test href="/tests/03\-MEM\-Linear\-Stressapptest_500\-1000MB.xml" name="03\-MEM\-Linear\-Stressapptest_500\-1000MB.xml"/>
    <test href="/tests/01\-MEM\-Trapezoidal\-Lookbusy_100\-1000.xml" name="01\-MEM\-Trapezoidal\-Lookbusy_100\-1000.xml"/>
    <test href="/tests/02\-MEM\-Trapezoidal\-Stressapptest_100\-1000.xml" name="02\-MEM\-Trapezoidal\-Stressapptest_100\-1000.xml"/>
    <test href="/tests/03\-NET\-Trapezoidal\-Iperf\-100\-1000.xml" name="03\-NET\-Trapezoidal\-Iperf\-100\-1000.xml"/>
    <test href="/tests/01\-IO\-Linear\-Lookbusy_1\-10.xml" name="01\-IO\-Linear\-Lookbusy_1\-10.xml"/>
  </items>
  <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
</collection>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/tests/\fI{name}\fP
.INDENT 7.0
.TP
.B Path arguments
\fBname\fP \-\- Name of tests that you want to get more info
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Displays Content of XML file.
.UNINDENT
.INDENT 0.0
.TP
.B POST\~/tests
.INDENT 7.0
.TP
.B Query params
\fBstring\fP \-\- name of the test that is located on COCOMA server
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB201\fP \-\- Emulation was created successfully
.IP \(bu 2
\fB400\fP \-\- Bad Request
.UNINDENT
.UNINDENT
.sp
Create emulation from already available tests
The returned \fI201\- Created\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<test href="/tests/5\-CPU_EMU" xmlns="http://127.0.0.1/cocoma">
  <emulationName>5\-CPU_EMU</emulationName>
  <startTime>2013\-04\-09T18:57:32</startTime>
  <durationSec>60</durationSec>
</test>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The returned \fI400\- Not Found\fP reply XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<error>error message</error>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/results
.INDENT 7.0
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Displays results list.
The returned \fI200\- OK\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<collection href="/results" xmlns="http://127.0.0.1/cocoma">
  <items offset="0" total="5">
    <results failedRuns="0" href="/results/1\-Emu\-CPU\-RAM\-IO" name="1\-Emu\-CPU\-RAM\-IO" state="inactive"/>
    <results failedRuns="0" href="/results/2\-CPU_EMU" name="2\-CPU_EMU" state="inactive"/>
    <results failedRuns="0" href="/results/3\-CPU_EMU" name="3\-CPU_EMU" state="inactive"/>
    <results failedRuns="0" href="/results/4\-CPU_EMU" name="4\-CPU_EMU" state="inactive"/>
    <results failedRuns="0" href="/results/5\-CPU_EMU" name="5\-CPU_EMU" state="inactive"/>
  </items>
  <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
</collection>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/results/\fI{name}\fP
.INDENT 7.0
.TP
.B Path arguments
\fBname\fP \-\- Name of tests that you want to get more info
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Displays information about results by name.
The returned \fI200\- OK\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<results href="/results/1\-Emu\-CPU\-RAM\-IO" xmlns="http://127.0.0.1/cocoma">
  <emulationName>1\-Emu\-CPU\-RAM\-IO</emulationName>
  <totalRuns>6</totalRuns>
  <executedRuns>6</executedRuns>
  <failedRuns>0</failedRuns>
  <emuState>inactive</emuState>
</results>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/logs/system
.INDENT 7.0
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Return Zip file with system logs.
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/logs/emulations
.INDENT 7.0
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Displays emulations logs list.
The returned \fI200\- OK\fP XML:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
<?xml version="1.0" ?>
<collection href="/logs/emulations" xmlns="http://127.0.0.1/cocoma">
  <items offset="0" total="3">
    <emulationLog href="/logs/emulations/3\-CPU_EMU" name="3\-CPU_EMU"/>
    <emulationLog href="/logs/emulations/5\-CPU_EMU" name="5\-CPU_EMU"/>
    <emulationLog href="/logs/emulations/4\-CPU_EMU" name="4\-CPU_EMU"/>
  </items>
  <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
  <link href="/logs" rel="parent" type="application/vnd.bonfire+xml"/>
</collection>
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B GET\~/logs/\fI{name}\fP
.INDENT 7.0
.TP
.B Path arguments
\fBname\fP \-\- Name of emulation logs that you want to get more info
.TP
.B Responses
.INDENT 7.0
.IP \(bu 2
\fB200\fP \-\- OK
.IP \(bu 2
\fB404\fP \-\- Not Found
.UNINDENT
.UNINDENT
.sp
Return Zip file with emulation logs.
.UNINDENT
.SS XML payload structure
.sp
Consider this sample XML document code:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<emulation>
  <emuname>CPU_EMU</emuname>
  <emuType>Mix</emuType>
  <emuresourceType>CPU</emuresourceType>
  <!\-\-date format: 2014\-10\-10T10:10:10 \-\->
  <emustartTime>now</emustartTime>
  <!\-\-duration in seconds \-\->
  <emustopTime>60</emustopTime>

  <distributions>

   <name>CPU_Distro</name>
     <startTime>0</startTime>
     <!\-\-duration in seconds \-\->
     <duration>60</duration>
     <granularity>20</granularity>
     <distribution href="/distributions/linear" name="linear" />
     <!\-\-cpu utilization distribution range\-\->
      <startLoad>10</startLoad>
      <stopLoad>95</stopLoad>

      <emulator href="/emulators/lookbusy" name="lookbusy" />
      <emulator\-params>
        <!\-\-more parameters will be added \-\->
        <resourceType>CPU</resourceType>
       <!\-\-Number of CPUs to keep busy (default: autodetected)\-\->
       <ncpus>0</ncpus>
      </emulator\-params>

  </distributions>

  <log>
   <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
   <enable>1</enable>
   <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
   <frequency>1</frequency>
   <logLevel>debug</logLevel>
  </log>

</emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
XML document defines emulation experiment details and consists of three blocks:
.INDENT 0.0
.IP \(bu 2
\fBEmulatuion\fP
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<emulation>
  <emuname>CPU_EMU</emuname>
  <emuType>Mix</emuType>
  <emuresourceType>CPU</emuresourceType>
  <!\-\-date format: 2014\-10\-10T10:10:10 \-\->
  <emustartTime>now</emustartTime>
  <!\-\-duration in seconds \-\->
  <emustopTime>60</emustopTime>
  ...
</emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fBDistribution\fP
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  <distributions>

   <name>CPU_Distro</name>
     <startTime>0</startTime>
     <!\-\-duration in seconds \-\->
     <duration>60</duration>
     <granularity>20</granularity>
     <distribution href="/distributions/linear" name="linear" />
     <!\-\-cpu utilization distribution range\-\->
      <startLoad>10</startLoad>
      <stopLoad>95</stopLoad>

      <emulator href="/emulators/lookbusy" name="lookbusy" />
      <emulator\-params>
        <!\-\-more parameters will be added \-\->
        <resourceType>CPU</resourceType>
       <!\-\-Number of CPUs to keep busy (default: autodetected)\-\->
       <ncpus>0</ncpus>
      </emulator\-params>

  </distributions>
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fBLog\fP (optional)
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
  <log>
   <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
   <enable>1</enable>
   <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
   <frequency>1</frequency>
   <logLevel>debug</logLevel>
  </log>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
In plain english it means \- create emulation named \fICPU_EMU\fP running for \fI60\fP sec. and stating right \fInow\fP. Emulation will include one distribution called \fICPU_Distro\fP which starts at the same time as emulation, will run for \fI60\fP sec. using \fIlinear\fP algorithm. In its duration it will increase workload of \fICPU\fP from \fI10%\fP to \fI95%\fP  in \fI20\fP steps by using \fIlookbusy\fP emulator. Workload produced by the application will be logged every second with very detailed information.
.SH CREATING EMULATION VIA CLI
.sp
Once \fIScheduler\fP was started and running we can now create stress emulations for the resources. We are using local XML \fBemulation.xml\fP file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
   <emulation>
     <emuname>CPU_Emulation</emuname>
     <emuType>Mix</emuType>
     <emuresourceType>Mix</emuresourceType>
     <emustartTime>now</emustartTime>
     <!\-\-duration in seconds \-\->
     <emustopTime>180</emustopTime>

     <distributions>
        <name>Distro1</name>
        <startTime>5</startTime>
        <!\-\-duration in seconds \-\->
        <duration>30</duration>
        <granularity>3</granularity>
        <distribution href="/distributions/linear" name="linear" />
      <!\-\-cpu utilization distribution range\-\->
         <startLoad>90</startLoad>
         <stopLoad>10</stopLoad>
         <emulator href="/emulators/stressapptest" name="lookbusy" />
         <emulator\-params>
           <!\-\-more parameters will be added \-\->
           <resourceType>CPU</resourceType>
      <!\-\-Number of CPUs to keep busy (default: autodetected)\-\->
      <ncpus>0</ncpus>

         </emulator\-params>
     </distributions>

      <distributions>
        <name>Distro2</name>
        <startTime>5</startTime>
        <!\-\-duration in seconds \-\->
        <duration>30</duration>
        <granularity>3</granularity>
        <distribution href="/distributions/linear" name="linear" />
      <!\-\-cpu utilization distribution range\-\->
         <startLoad>10</startLoad>
         <stopLoad>90</stopLoad>
         <emulator href="/emulators/stressapptest" name="lookbusy" />
         <emulator\-params>
           <!\-\-more parameters will be added \-\->
           <resourceType>CPU</resourceType>
      <!\-\-Number of CPUs to keep busy (default: autodetected)\-\->
      <ncpus>0</ncpus>

         </emulator\-params>
     </distributions>

     <log>
      <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
      <enable>1</enable>
      <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
      <frequency>3</frequency>
     </log>

   </emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
start with simple CLI command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ccmsh \-x emulation.xml
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If everything went right, you will see on the screen list of scheduled jobs:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ ccmsh \-x emulation.xml
INFO:XML Parser:Finished running
INFO:Distriburion Manager:Scheduler reply: 6\-CPU_Emulation\-7\-0\-Distro1\-lookbusy\-cpu: 90 Duration: 10.0sec.Start Time: 2013\-04\-10 09:43:01 End Time: 09:43:11
INFO:Distriburion Manager:Scheduler reply: 6\-CPU_Emulation\-7\-1\-Distro1\-lookbusy\-cpu: 50 Duration: 10.0sec.Start Time: 2013\-04\-10 09:43:13 End Time: 09:43:23
INFO:Distriburion Manager:Scheduler reply: 6\-CPU_Emulation\-7\-2\-Distro1\-lookbusy\-cpu: 10 Duration: 10.0sec.Start Time: 2013\-04\-10 09:43:25 End Time: 09:43:35
INFO:Distriburion Manager:Scheduler reply: 6\-CPU_Emulation\-8\-0\-Distro2\-lookbusy\-cpu: 10 Duration: 10.0sec.Start Time: 2013\-04\-10 09:43:01 End Time: 09:43:11
INFO:Distriburion Manager:Scheduler reply: 6\-CPU_Emulation\-8\-1\-Distro2\-lookbusy\-cpu: 50 Duration: 10.0sec.Start Time: 2013\-04\-10 09:43:13 End Time: 09:43:23
INFO:Distriburion Manager:Scheduler reply: 6\-CPU_Emulation\-8\-2\-Distro2\-lookbusy\-cpu: 90 Duration: 10.0sec.Start Time: 2013\-04\-10 09:43:25 End Time: 09:43:35
INFO:Emulation Manager:##Emulation 6\-Emu\-CPU\-RAM\-IO created
INFO:Emulation Manager:Started logger:6\-CPU_Emulation\-logger interval\-3sec.StartTime:2013\-04\-10 09:42:56
6\-Emu\-CPU\-RAM\-IO
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Each line from \fI3\-8\fP shows information of a single scheduled emulation job. If we break it down, the line \fI3\fP from above as an example we have:
.INDENT 0.0
.IP \(bu 2
\fBINFO:Distriburion Manager:Scheduler reply:\fP \-just a generic logger part
.IP \(bu 2
\fB6\-CPU_Emulation\fP \- emulation name, which is a combined string of emulation ID from the DB and \fBemuname\fP value in the XML file
.IP \(bu 2
\fB7\fP \- database ID number for distribution
.IP \(bu 2
\fB0\fP \- run number of this distribution
.IP \(bu 2
\fBDistro1\fP \- name of the distribution taken from XML file
.IP \(bu 2
\fBlookbusy\fP \- distribution module used to calculate each run parameters
.IP \(bu 2
\fBcpu\fP \- the type of the resource used by this run
.IP \(bu 2
\fB90\fP \- stress value applied to this run
.IP \(bu 2
\fBDuration 10.0sec.\fP \- how long will job run
.IP \(bu 2
\fBStart Time: 2013\-04\-10 09:43:01 End Time: 09:43:11\fP \- time gap when run will be executed
.UNINDENT
.sp
We can write run name notation in this way:
.sp
\fB(logger reply) \- (emulationID\-name) \- (distribution ID) \- (run number} \- (distribution name) \- (distribution module) \- (resource) \- (stress value) \- (run duration) \- (execution time)\fP
.sp
Line \fI10\fP shows another job which was created for the logger.This job will appear only if \fIlog\fP section is stated in XML and is optional. Logger job runs for the duration of the whole emulation
and collects system resource usage information.
Logger job name notation can be described in this way:
.sp
\fB(logger reply) \- (emulationID\-name) \- (logger mark) \- {poll interval} \- (start time)\fP
.SH CREATING EMULATION VIA API CLIENT (RESTFULLY)
.sp
Here you can find examples for building ruby script XML payloads for \fI\%restfully\fP client.
.sp
First you need to create configuration file like \fBcocoma.yml\fP. It contains the IP address URI of COCOMA web API and used mediatype name:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
uri: http://10.55.164.223:5050/
require: [ApplicationVndBonfireXml]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Next we creating \fBMEM\-emulation.rb\fP file which contains XML payload and the path to config file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
require \(aqrubygems\(aq
require \(aqrestfully\(aq
require \(aqlogger\(aq

session = Restfully::Session.new(
 :configuration_file => "~/cocoma.yml"

)

session.logger.level = Logger::INFO

emulation = nil

begin
 emulation = session.root.emulations.submit(
   :emuname => "MEM\-emulation",
   :emutype => "Contention",
   :emuresourceType => "RAM",
   :emustartTime => "now",
   :emustopTime => "240",
   :distributions =>[{
         :name => "MEM\-increase",
            :startTime =>"0",
            :duration =>"120",
            :granularity =>"10",
           :distribution => {
            :href => "/distributions/linear",
            :name => "linear"},
           :startLoad => "1000",
            :stopLoad => "18000",
            :emulator =>{
            :href => "/emulators/stressapptest",
            :name => "stressapptest"},
            :\(aqemulator\-params\(aq =>{
                  :resourceType =>"MEM",
                  :memThreads => "1"}
      },
         {
                :name => "MEM\-decrease",
                :startTime =>"121",
                :duration =>"119",
                :granularity =>"10",
                :distribution => {
                                :href => "/distributions/linear",
                                :name => "linear"},
                :startLoad => "18000",
                :stopLoad => "1000",
                :emulator =>{
                                :href => "/emulators/stressapptest",
                                :name => "stressapptest"},
                :\(aqemulator\-params\(aq =>{
                                :resourceType =>"MEM",
                                :memThreads => "1"}
                }]
 )

end
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Finally we launch the script using \fBresfully\fP client
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ restfully emulation.rb
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If then you would like to check if the emulation was created you can list emulations again using \fBrestfully\fP :
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
$ restfully \-c cocoma.yml

>> #<Collection:0x45f9f3e uri="/emulations"
>>  RELATIONSHIPS
>>    parent, self
>>  ITEMS (0..2)/2
>>    #<Resource:0x45b5d3e name="7\-CPU_Stress" uri="/emulations/7\-CPUStress">
>>    #<Resource:0x4489eb0 name="8\-MEM\-emulation" uri="/emulations/8\-MEM\-emulation">>
>> => nil
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To get more client tutorials check the \fI\%restfully\fP web site.
.SH XML EXAMPLES
.sp
This section shows XML payload examples for creating emulation experiments
.SS CPU
.sp
Emulation XML for the CPU contention:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<emulation>
  <emuname>CPU_EMU</emuname>
  <emuType>Mix</emuType>
  <emuresourceType>CPU</emuresourceType>
  <!\-\-date format: 2014\-10\-10T10:10:10 \-\->
  <emustartTime>now</emustartTime>
  <!\-\-duration in seconds \-\->
  <emustopTime>120</emustopTime>

  <distributions>
   <name>CPU_Distro</name>
     <startTime>0</startTime>
     <!\-\-duration in seconds \-\->
     <duration>120</duration>
     <granularity>24</granularity>
     <distribution href="/distributions/linear_incr" name="linear_incr" />
     <!\-\-cpu utilization distribution range\-\->
      <startLoad>10</startLoad>
      <stopLoad>95</stopLoad>
      <emulator href="/emulators/lookbusy" name="lookbusy" />

      <emulator\-params>
        <!\-\-more parameters will be added \-\->
        <resourceType>CPU</resourceType>
       <!\-\-Number of CPUs to keep busy (default: autodetected)\-\->
       <ncpus>0</ncpus>
      </emulator\-params>
  </distributions>

  <log>
   <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
   <enable>1</enable>
   <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
   <frequency>1</frequency>
   <logLevel>debug</logLevel>
  </log>

</emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS I/O
.sp
Emulation XML for the I/O contention:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<emulation>
  <emuname>IO_EMU</emuname>
  <emuType>Mix</emuType>
  <emuresourceType>IO</emuresourceType>
  <!\-\-date format: 2014\-10\-10T10:10:10 \-\->
  <emustartTime>now</emustartTime>
  <!\-\-duration in seconds \-\->
  <emustopTime>60</emustopTime>

  <distributions>

   <name>IO_Distro</name>
     <startTime>0</startTime>
     <!\-\-duration in seconds \-\->
     <duration>60</duration>
     <granularity>5</granularity>
     <distribution href="/distributions/linear_incr" name="linear_incr" />
      <startLoad>1</startLoad>
      <stopLoad>10</stopLoad>
      <emulator href="/emulators/lookbusy" name="lookbusy" />

      <emulator\-params>
        <!\-\-more parameters will be added \-\->
        <resourceType>IO</resourceType>
       <!\-\-Size of blocks to use for I/O, in MB\-\->
       <ioBlockSize>10</ioBlockSize>
       <!\-\-Time to sleep between iterations, in msec\-\->
       <ioSleep>100</ioSleep>
      </emulator\-params>

  </distributions>

  <log>
   <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
   <enable>1</enable>
   <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
   <frequency>3</frequency>
   <logLevel>debug</logLevel>
  </log>

</emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
2nd example using \fItrapezoidal\fP distribution:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<emulation>
  <emuname>IO_EMU</emuname>
  <emuType>Mix</emuType>
  <emuresourceType>IO</emuresourceType>
  <!\-\-date format: 2014\-10\-10T10:10:10 \-\->
  <emustartTime>now</emustartTime>
  <!\-\-duration in seconds \-\->
  <emustopTime>60</emustopTime>

  <distributions>

   <name>IO_Distro</name>
     <startTime>0</startTime>
     <!\-\-duration in seconds \-\->
     <duration>60</duration>
     <granularity>5</granularity>
     <distribution href="/distributions/trapezoidal" name="trapezoidal" />
      <startLoad>1</startLoad>
      <stopLoad>10</stopLoad>
      <emulator href="/emulators/lookbusy" name="lookbusy" />

      <emulator\-params>
        <!\-\-more parameters will be added \-\->
        <resourceType>IO</resourceType>
       <!\-\-Size of blocks to use for I/O, in MB\-\->
       <ioBlockSize>10</ioBlockSize>
       <!\-\-Time to sleep between iterations, in msec\-\->
       <ioSleep>100</ioSleep>
      </emulator\-params>

  </distributions>

  <log>
   <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
   <enable>1</enable>
   <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
   <frequency>3</frequency>
   <logLevel>debug</logLevel>
  </log>

</emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Memory
.sp
Emulation XML for the memory contention:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<emulation>
  <emuname>MEM_EMU</emuname>
  <emuType>Mix</emuType>
  <emuresourceType>MEM</emuresourceType>
  <!\-\-date format: 2014\-10\-10T10:10:10 \-\->
  <emustartTime>now</emustartTime>
  <!\-\-duration in seconds \-\->
  <emustopTime>60</emustopTime>

  <distributions >
     <name>MEM_Distro</name>
     <startTime>0</startTime>
     <!\-\-duration in seconds \-\->
     <duration>60</duration>
     <granularity>5</granularity>
     <distribution href="/distributions/linear_incr" name="linear_incr" />
     <!\-\-Megabytes for memory \-\->
      <startLoad>100</startLoad>
      <stopLoad>1000</stopLoad>
      <emulator href="/emulators/lookbusy" name="lookbusy" />
      <emulator\-params>
        <resourceType>MEM</resourceType>
       <!\-\-time between iterations in usec (default 1000)\-\->
       <malloclimit>4004</malloclimit>
      <memSleep>0</memSleep>
      </emulator\-params>
  </distributions>

  <log>
   <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
   <enable>1</enable>
   <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
   <frequency>3</frequency>
   <logLevel>debug</logLevel>
  </log>

</emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
2nd example using \fItrapezoidal\fP distribution:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<emulation>
  <emuname>MEM_EMU</emuname>
  <emuType>Mix</emuType>
  <emuresourceType>MEM</emuresourceType>
  <!\-\-date format: 2014\-10\-10T10:10:10 \-\->
  <emustartTime>now</emustartTime>
  <!\-\-duration in seconds \-\->
  <emustopTime>60</emustopTime>

  <distributions >
     <name>MEM_Distro</name>
     <startTime>0</startTime>
     <!\-\-duration in seconds \-\->
     <duration>60</duration>
     <granularity>5</granularity>
     <distribution href="/distributions/trapezoidal" name="trapezoidal" />
     <!\-\-Megabytes for memory \-\->
      <startLoad>100</startLoad>
      <stopLoad>1000</stopLoad>
      <malloclimit>4000</malloclimit>
      <emulator href="/emulators/lookbusy" name="lookbusy" />
      <emulator\-params>
        <resourceType>MEM</resourceType>
       <!\-\-time between iterations in usec (default 1000)\-\->
      <memSleep>0</memSleep>
      </emulator\-params>
  </distributions>

  <log>
   <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
   <enable>0</enable>
   <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
   <frequency>3</frequency>
   <logLevel>debug</logLevel>
  </log>

</emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Network
.sp
For this emulation to work you need to deploy two COCOMA VM\(aqs. One will act as a client (the one where XML is sent) and the other will act as a server.
Emulation XML for the network contention:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
<emulation>
  <emuname>NET_emu</emuname>
  <emuType>Mix</emuType>
  <emuresourceType>NET</emuresourceType>
  <!\-\-2014\-02\-02T10:10:10\-\->
  <emustartTime>now</emustartTime>
  <!\-\-duration in seconds \-\->
  <emustopTime>155</emustopTime>

  <distributions>
   <name>NET_distro</name>
     <startTime>0</startTime>
     <!\-\-duration in seconds \-\->
     <duration>150</duration>
     <granularity>10</granularity>
     <distribution href="/distributions/linear" name="linear" />
   <!\-\-cpu utilization distribution range\-\->
      <startLoad>100</startLoad>
      <!\-\- set target bandwidth to bits per sec \-\->
      <stopLoad>1000</stopLoad>
      <emulator href="/emulators/iperf" name="iperf" />
    <emulator\-params>
        <resourceType>NET</resourceType>
        <serverip>10.55.164.223</serverip>
   <!\-\-Leave "0" for default 5001 port \-\->
   <serverport>5001</serverport>
        <clientip>127.0.0.1</clientip>
   <clientport>5001</clientport>
        <packettype>UDP</packettype>
    </emulator\-params>
  </distributions>

  <log>
   <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
   <enable>0</enable>
   <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
   <frequency>3</frequency>
  </log>

</emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Multiple Distributions
.sp
You can create multiple distributions within one emulation. This allows to specify contention properties for multiple resources or create different patterns for the same resource.
Distributions can overlap, meaning two distributions can run in the same time frame. If distributions for the same resource will overlap, the runs might crash if not enough resources available.
.INDENT 0.0
.IP \(bu 2
CPU and Memory example
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
       <emulation>
           <emuname>CPU_and_Mem</emuname>
           <emutype>Mix</emutype>
           <emuresourceType>CPU</emuresourceType>
           <emustartTime>now</emustartTime>
           <!\-\-duration in seconds \-\->
           <emustopTime>80</emustopTime>

           <distributions>
            <name>CPU_distro</name>
            <startTime>0</startTime>
            <!\-\-duration in seconds \-\->
            <duration>60</duration>
            <granularity>1</granularity>
            <distribution href="/distributions/linear" name="linear" />
            <!\-\-cpu utilization distribution range\-\->
            <startLoad>10</startLoad>
            <stopLoad>95</stopLoad>
            <emulator href="/emulators/lookbusy" name="lookbusy" />
            <emulator\-params>
                 <!\-\-more parameters will be added \-\->
                 <resourceType>CPU</resourceType>
                 <!\-\-Number of CPUs to keep busy (default: autodetected)\-\->
                 <ncpus>0</ncpus>
            </emulator\-params>
          </distributions>

           <distributions >
              <name>MEM_Distro</name>
              <startTime>20</startTime>
              <!\-\-duration in seconds \-\->
              <duration>60</duration>
              <granularity>5</granularity>
              <distribution href="/distributions/linear_incr" name="linear_incr" />
              <!\-\-Megabytes for memory \-\->
               <startLoad>100</startLoad>
               <stopLoad>1000</stopLoad>
               <emulator href="/emulators/lookbusy" name="lookbusy" />
               <emulator\-params>
                 <resourceType>MEM</resourceType>
                <!\-\-time between iterations in usec (default 1000)\-\->
                <malloclimit>4004</malloclimit>
               <memSleep>0</memSleep>
               </emulator\-params>
           </distributions>

          <log>
            <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
            <enable>1</enable>
            <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
            <frequency>3</frequency>
          </log>
       </emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
CPU, MEM and IO example
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
       <emulation>
           <emuname>CPU_and_Mem</emuname>
           <emutype>Mix</emutype>
           <emuresourceType>CPU</emuresourceType>
           <emustartTime>now</emustartTime>
           <!\-\-duration in seconds \-\->
           <emustopTime>80</emustopTime>

           <distributions>
            <name>CPU_distro</name>
            <startTime>0</startTime>
            <!\-\-duration in seconds \-\->
            <duration>60</duration>
            <granularity>1</granularity>
            <distribution href="/distributions/linear" name="linear" />
            <!\-\-cpu utilization distribution range\-\->
            <startLoad>10</startLoad>
            <stopLoad>95</stopLoad>
            <emulator href="/emulators/lookbusy" name="lookbusy" />
            <emulator\-params>
                 <!\-\-more parameters will be added \-\->
                 <resourceType>CPU</resourceType>
                 <!\-\-Number of CPUs to keep busy (default: autodetected)\-\->
                 <ncpus>0</ncpus>
            </emulator\-params>
          </distributions>

           <distributions >
              <name>MEM_Distro</name>
              <startTime>20</startTime>
              <!\-\-duration in seconds \-\->
              <duration>60</duration>
              <granularity>5</granularity>
              <distribution href="/distributions/linear_incr" name="linear_incr" />
              <!\-\-Megabytes for memory \-\->
               <startLoad>100</startLoad>
               <stopLoad>1000</stopLoad>
               <emulator href="/emulators/lookbusy" name="lookbusy" />
               <emulator\-params>
                 <resourceType>MEM</resourceType>
                <!\-\-time between iterations in usec (default 1000)\-\->
                <malloclimit>4004</malloclimit>
               <memSleep>0</memSleep>
               </emulator\-params>
           </distributions>

           <distributions>
            <name>IO_Distro</name>
              <startTime>0</startTime>
              <!\-\-duration in seconds \-\->
              <duration>60</duration>
              <granularity>5</granularity>
              <distribution href="/distributions/linear_incr" name="linear_incr" />
               <startLoad>1</startLoad>
               <stopLoad>10</stopLoad>
               <emulator href="/emulators/lookbusy" name="lookbusy" />

               <emulator\-params>
                 <!\-\-more parameters will be added \-\->
                 <resourceType>IO</resourceType>
                <!\-\-Size of blocks to use for I/O, in MB\-\->
                <ioBlockSize>10</ioBlockSize>
                <!\-\-Time to sleep between iterations, in msec\-\->
                <ioSleep>100</ioSleep>
               </emulator\-params>
            </distributions>

          <log>
            <!\-\- Use value "1" to enable logging(by default logging is off)  \-\->
            <enable>1</enable>
            <!\-\- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  \-\->
            <frequency>3</frequency>
          </log>
       </emulation>
.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fIsearch\fP
.UNINDENT
.SH AUTHOR
Carmelo Ragusa, Philip Robinson, Sergej Svorobej
.SH COPYRIGHT
2012-2013, SAP
.\" Generated by docutils manpage writer.
.
