
Getting Started
***************

COCOMA is installed in *"/usr/share/pyshared/cocoma"*. In this section
we provide information about the components that have to be running in
order to fully use the framework, and how can a user interact with it.


Starting Components
===================

The two main components of COCOMA are:

   * Scheduler daemon (mandatory, needs to be the first started)

   * API Daemon (optional, if the REST API functionality is
     required)

The **Scheduler daemon** - runs in the background and executes
workload with differential parameters at the time defined in the
emulation properties. To check if the scheduler is running use the
following:

   $ ccmsh --show scheduler

To start the scheduler on a specific network interface and port, use
the command:

   $ ccmsh --start scheduler eth1 55555

If the network interface and port are omitted, the default values are
respectively *eth0* adn *51889*

If more detailed output information is needed, the *Scheduler* can
also be started in *DEBUG* mode:

   $ ccmsh --start scheduler eth1 55555 debug

The **API daemon** - provides the RESTfull web API, which exposes
COCOMA resources to be used over the network. It follows the same
command structure as the Scheduler. To check if the API daemon is
running use the following:

   $ ccmsh --show api

To start the api on a specific network interface and port, use the
command:

   $ ccmsh --start api eth2 77777

If the network interface and port are omitted, the default values are
respectively *eth0* and *5050*

The log level is the same specified for the *Scheduler*.


CLI
===

The COCOMA CLI is called *ccmsh*, and provides the following options:

-h, --help

   Display help information of the available options

-v, --version

   Display installed version information of COCOMA

-q, --mq

   add configuration parameters for message queue: enabled vhost
   exchange user password host topic

-m, --rmq

   remove configuration parameters for message queue

-a, --enl

   enable configuration parameters for message queue

-s, --smq

   show configuration parameters for message queue

-b, --bfz

   Update/Show location of Backfuzz emulator (stored in database)

-l, --list <emulation name>

   Display list of all emulations that are scheduled or already
   finished. If emulation name is provided then it lists information
   for that specific emulation

-r, --results <emulation name>

   Display list of results of all emulations that are scheduled or
   already finished. If emulation name is provided, then it lists
   information for that specific emulation

-j, --list-jobs

   Queries the scheduler for the list of jobs that are scheduled to be
   executed and are currently executing. For each one, it gives the
   job name, the planned execution time, and the duration (when
   available)

-i, --dist <distribution name>

   Scans the *"/usr/share/pyshared/cocoma/distributions"* folder and
   displays all available distribution modules. If a distribution name
   is provided, then it shows the help information for that specific
   distribution

-e, --emu <emulator name>

   Scans the *"/usr/share/pyshared/cocoma/emulators"* folder and
   displays all available emulator wrapper modules. If an emulator
   name is provided, then it shows the help information for that
   specific emulator wrapper

-x, --xml <file name>

   It create and emulation based on the XML provided

-n, --now (used with -x option only)

   Override any start date in the local XML emulation file without
   modifying the file, i.e. "ccmsh -x <file name> -n"

-d, --delete <emulation name>

   Deletes a specific emulation from the database

-p, --purge

   Remove all DB entries, all scheduled jobs and all logs

--start <api interface port>, <scheduler interface port>

   Start Scheduler or API daemon by specifying network interface and
   port number i.e. "ccmsh --start api eth0 2020" or "ccmsh --start
   scheduler eth0 3030". By default if the network interface is not
   specified, the Scheduler daemon will run on *eth0* and *51889*, and
   the API daemon will run on *eth0* and *5050*.

--stop <api>, <scheduler>

   Stop Scheduler or API daemon

--show <api>, <scheduler>

   Show Scheduler or API daemon processes and their PID numbers

Most of these options are used by themselves, with the exception of
'-x' (--xml) which can be used in conjunction with '-f' (--force)
and/or '-n' (--now)


Logging
=======


Event Logging
-------------

COCOMA provides two levels of event logging, *INFO* which is set by
default, and *DEBUG* which can be enabled if more detailed feedback is
required:

   $ ccmsh --start scheduler eth1 55555 debug

Timestamped events are then saved in the "logs/COCOMAlogfile.csv"
file.

Both *Scheduler* and *API* also save their CLI output in the
"logs/COCOMAlogfile_Scheduler_sout.txt" and
"logs/COCOMAlogfile_API_sout.txt" accordingly. All above files can be
retrieved as ZIP archive through COCOMA web API URI:

   * /logs/system


Resource Consumption Logging
----------------------------

Optionally the CPU, Memory and Network consumption of COCOMA VM can be
recorded during each emulation. To enable resource consumption logging
just add this XML code block to the payload:

   <log>
    <!-- Use value "1" to enable logging(by default logging is off)  -->
    <enable>1</enable>
    <!-- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  -->
    <frequency>1</frequency>
    <!-- Set the level of information detail  -->
    <logLevel>debug</logLevel>
   </log>

If the logging was enabled, once the emulation is finished, COCOMA
will produce two files named after the emulation (e.g. "logs/4
-CPU_EMU-res_2013-04-09T18:51:09.csv" and "logs/4-CPU_EMU-
config_2013-04-09T18:51:09.xml"). The file with CSV extention will
contain the system resource data, and the file with XML extention will
have the exact copy of the payload used for that emulation.

Both files can be retrieved as ZIP archive through COCOMA web API URI
by emulation name:

   * /logs/emulations
   * /logs/emulations/{name}


REST API
========


Index
-----

The API URIs summary list is as follow:

   * /
   * /emulations
   * /emulations/{name}
   * /distributions
   * /distributions/{name}
   * /emulators
   * /emulators/{name}
   * /results
   * /results/{name}
   * /tests
   * /tests/{name}
   * /logs
   * /logs/system
   * /logs/emulations
   * /logs/emulations/{name}


Description
-----------

"http:method:: GET /"

   The **root** returns a *collection* of all the available resources.
   Example of a XML response:

      <?xml version="1.0" ?>
      <root href="/">
              <version>0.1.1</version>
              <timestamp>1365518303.44</timestamp>
              <link href="/emulations" rel="emulations" type="application/vnd.bonfire+xml"/>
              <link href="/emulators" rel="emulators" type="application/vnd.bonfire+xml"/>
              <link href="/distributions" rel="distributions" type="application/vnd.bonfire+xml"/>
              <link href="/tests" rel="tests" type="application/vnd.bonfire+xml"/>
              <link href="/results" rel="results" type="application/vnd.bonfire+xml"/>
              <link href="/logs" rel="logs" type="application/vnd.bonfire+xml"/>
      </root>

"http:method:: GET /emulations"

   The **emulations** returns a *collection* of all the available
   emulation resources. Example of a XML response:

      <?xml version="1.0" ?>
      <collection href="/emulations" xmlns="http://127.0.0.1/cocoma">
              <items offset="0" total="3">
                      <emulation href="/emulations/1-Emu-CPU-RAM-IO" id="1" name="1-Emu-CPU-RAM-IO" state="inactive"/>
                      <emulation href="/emulations/2-CPU_EMU" id="2" name="2-CPU_EMU" state="inactive"/>
                      <emulation href="/emulations/3-CPU_EMU" id="3" name="3-CPU_EMU" state="inactive"/>
              </items>
              <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
      </collection>

"http:method:: GET /emulations/{name}"

   Displays information about emulation by name. The returned *200-OK*
   XML is:

      <?xml version="1.0" ?>
      <emulation href="/emulations/1-Emu-CPU-RAM-IO" xmlns="http://127.0.0.1/cocoma">
              <id>1</id>
              <emulationName>1-Emu-CPU-RAM-IO</emulationName>
              <emulationType>mix</emulationType>
              <resourceType>mix</resourceType>
              <emuStartTime>2013-04-09T13:00:01</emuStartTime>
              <emuStopTime>180</emuStopTime>
              <scheduledJobs>
                      <jobsempty>No jobs are scheduled</jobsempty>
              </scheduledJobs>
              <distributions ID="1" name="Distro1">
                      <startTime>5</startTime>
                      <granularity>3</granularity>
                      <duration>30</duration>
                      <startload>10</startload>
                      <stopload>90</stopload>
              </distributions>
              <distributions ID="2" name="Distro2">
                      <startTime>5</startTime>
                      <granularity>3</granularity>
                      <duration>30</duration>
                      <startload>10</startload>
                      <stopload>90</stopload>
              </distributions>
              <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
              <link href="/emulations" rel="parent" type="application/vnd.bonfire+xml"/>
      </emulation>

   The returned *404 â€“ Not Found* XML is:

      <error>Emulation Name: 1-Emu-CPU-RAM-IO1 not found. Error:too many values to unpack</error>

"http:method:: POST /emulations"

      :param string XML: Emulation parameters defined via XML as shown in the examples section.

   The returned *201-Created* XML:

      <?xml version="1.0" ?>
      <emulation href="/emulations/4-CPU_EMU" xmlns="http://127.0.0.1/cocoma">
              <ID>4-CPU_EMU</ID>
              <EmuNotes>OK</EmuNotes>
              <DistroNotes>OK</DistroNotes>
              <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
              <link href="/emulations" rel="parent" type="application/vnd.bonfire+xml"/>
      </emulation>

   The returned *400 â€“ Bad Request* XML:

      <?xml version="1.0" ?>
      <error>XML is not well formed Error: syntax error: line 1, column 0</error>

"http:method:: GET /emulators"

   Displays emulators list. The returned *200- OK* XML:

      <?xml version="1.0" ?>
      <collection href="/emulators" xmlns="http://127.0.0.1/cocoma">
              <items offset="0" total="3">
                      <emulator href="/emulators/lookbusy" name="lookbusy"/>
                      <emulator href="/emulators/stressapptest" name="stressapptest"/>
                      <emulator href="/emulators/iperf" name="iperf"/>
              </items>
              <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
      </collection>

"http:method:: GET /emulators/{name}"

      :arg name: Name of emulator that you want to get more info

   Displays information about emulator by name. It returns parameters
   that can be used with emulator and the values limits (where
   applicable). The returned *200- OK* XML:

      <?xml version="1.0" ?>
      <emulator href="/emulators/lookbusy" xmlns="http://127.0.0.1/cocoma">
        <info>
          <help>
          Emulator lookbusy can be used for following resources:
          1)Loads CPU with parameters:
            ncpus - Number of CPUs to keep busy (default: autodetected)

          2)Loads Memory(MEM) with parameters:
            memSleep - Time to sleep between iterations, in usec (default 1000)

          3)Changing size of files to use during IO with parameters:
            ioBlockSize - Size of blocks to use for I/O in MB
            ioSleep - Time to sleep between iterations, in msec (default 100)


          XML block example:
          &lt;emulator-params&gt;
              &lt;resourceType&gt;CPU&lt;/resourceType&gt;
              &lt;ncpus&gt;0&lt;/ncpus&gt;
          &lt;/emulator-params&gt;

          </help>
          <resources>
            <cpu>
              <ncpus>
                <upperBound>100</upperBound>
                <lowerBound>100</lowerBound>
              </ncpus>
            </cpu>
            <io>
              <iosleep>
                <upperBound>999999999</upperBound>
                <lowerBound>999999999</lowerBound>
              </iosleep>
              <ioblocksize>
                <upperBound>9999999</upperBound>
                <lowerBound>9999999</lowerBound>
              </ioblocksize>
            </io>
            <mem>
              <memsleep>
                <upperBound>999999999</upperBound>
                <lowerBound>999999999</lowerBound>
              </memsleep>
            </mem>
          </resources>
        </info>
        <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
        <link href="/emulators" rel="parent" type="application/vnd.bonfire+xml"/>
      </emulator>

"http:method:: GET /distributions"

   Displays distributions list. The returned *200- OK* XML:

      <?xml version="1.0" ?>
      <collection href="/distributions" xmlns="http://127.0.0.1/cocoma">
              <items offset="0" total="3">
                      <distribution href="/distributions/linear" name="linear"/>
                      <distribution href="/distributions/linear_incr" name="linear_incr"/>
                      <distribution href="/distributions/trapezoidal" name="trapezoidal"/>
              </items>
              <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
      </collection>

"http:method:: GET /distributions/{name}"

      :arg name: Name of distributions that you want to get more info

   Displays information about distributions by name. It returns
   parameters that can be used with distributions and the values
   limits(where applicable). The returned *200- OK* XML:

      <?xml version="1.0" ?>
      <distribution href="/distributions/linear_incr" xmlns="http://127.0.0.1/cocoma">
        <info>
          <help>Linear Increase distribution takes in start and stop load (plus malloclimit for MEM) parameters and gradually
          increasing resource workload by spawning jobs in parallel. Can be used with MEM,IO,NET resource types.</help>
          <resources>
            <mem>
              <startload>
                <upperBound>3895</upperBound>
                <lowerBound>3895</lowerBound>
              </startload>
              <stopload>
                <upperBound>3895</upperBound>
                <lowerBound>3895</lowerBound>
              </stopload>
              <malloclimit>
                <upperBound>4095</upperBound>
                <lowerBound>4095</lowerBound>
              </malloclimit>
            </mem>
            <io>
              <startload>
                <upperBound>999999</upperBound>
                <lowerBound>999999</lowerBound>
              </startload>
              <stopload>
                <upperBound>999999</upperBound>
                <lowerBound>999999</lowerBound>
              </stopload>
            </io>
            <net>
              <startload>
                <upperBound>1000000</upperBound>
                <lowerBound>1000000</lowerBound>
              </startload>
              <stopload>
                <upperBound>1000000</upperBound>
                <lowerBound>1000000</lowerBound>
              </stopload>
            </net>
          </resources>
        </info>
        <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
        <link href="/distributions" rel="parent" type="application/vnd.bonfire+xml"/>
      </distribution>

"http:method:: GET /tests"

   Displays tests list. The returned *200- OK* XML:

      <?xml version="1.0" ?>
      <collection href="/tests" xmlns="http://127.0.0.1/cocoma">
              <items offset="0" total="20">
                      <test href="/tests/01-CPU-Linear-Lookbusy_10-95.xml" name="01-CPU-Linear-Lookbusy_10-95.xml"/>
                      <test href="/tests/03-NET-Linear_incr-Iperf-100-1000.xml" name="03-NET-Linear_incr-Iperf-100-1000.xml"/>
                      <test href="/tests/02-IO-Linear-Stressapptest_1-10.xml" name="02-IO-Linear-Stressapptest_1-10.xml"/>
                      <test href="/tests/02-IO-Linear_incr-Stressapptest_1-10.xml" name="02-IO-Linear_incr-Stressapptest_1-10.xml"/>
                      <test href="/tests/02-MEM-Linear_incr-Stressapptest_100-1000.xml" name="02-MEM-Linear_incr-Stressapptest_100-1000.xml"/>
                      <test href="/tests/01-CPU-Trapezoidal-Lookbusy_10-95.xml" name="01-CPU-Trapezoidal-Lookbusy_10-95.xml"/>
                      <test href="/tests/01-IO-Trapezoidal-Lookbusy_1-10.xml" name="01-IO-Trapezoidal-Lookbusy_1-10.xml"/>
                      <test href="/tests/01-NET_TEST.xml" name="01-NET_TEST.xml"/>
                      <test href="/tests/03-MEM-500-1000MB-overlap.xml" name="03-MEM-500-1000MB-overlap.xml"/>
                      <test href="/tests/01-CPU-Linear_incr-Lookbusy_10-95.xml" name="01-CPU-Linear_incr-Lookbusy_10-95.xml"/>
                      <test href="/tests/01-IO-Linear_incr-Lookbusy_1-10.xml" name="01-IO-Linear_incr-Lookbusy_1-10.xml"/>
                      <test href="/tests/02-IO-Trapezoidal-Stressapptest_1-10.xml" name="02-IO-Trapezoidal-Stressapptest_1-10.xml"/>
                      <test href="/tests/03-CPU-opposite.xml" name="03-CPU-opposite.xml"/>
                      <test href="/tests/01-MEM-Linear_incr-Lookbusy_100-1000.xml" name="01-MEM-Linear_incr-Lookbusy_100-1000.xml"/>
                      <test href="/tests/03-MEM-500-1000MB.xml" name="03-MEM-500-1000MB.xml"/>
                      <test href="/tests/03-MEM-Linear-Stressapptest_500-1000MB.xml" name="03-MEM-Linear-Stressapptest_500-1000MB.xml"/>
                      <test href="/tests/01-MEM-Trapezoidal-Lookbusy_100-1000.xml" name="01-MEM-Trapezoidal-Lookbusy_100-1000.xml"/>
                      <test href="/tests/02-MEM-Trapezoidal-Stressapptest_100-1000.xml" name="02-MEM-Trapezoidal-Stressapptest_100-1000.xml"/>
                      <test href="/tests/03-NET-Trapezoidal-Iperf-100-1000.xml" name="03-NET-Trapezoidal-Iperf-100-1000.xml"/>
                      <test href="/tests/01-IO-Linear-Lookbusy_1-10.xml" name="01-IO-Linear-Lookbusy_1-10.xml"/>
              </items>
              <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
      </collection>

"http:method:: GET /tests/{name}"

      :arg name: Name of tests that you want to get more info

   Displays Content of XML file.

"http:method:: POST /tests"

      :param string: name of the test that is located on COCOMA machine

   Create emulation from available tests. The returned *201- Created*
   XML:

      <?xml version="1.0" ?>
      <test href="/tests/5-CPU_EMU" xmlns="http://127.0.0.1/cocoma">
              <emulationName>5-CPU_EMU</emulationName>
              <startTime>2013-04-09T18:57:32</startTime>
              <durationSec>60</durationSec>
      </test>

   The returned *400- Not Found* reply XML:

      <?xml version="1.0" ?>
      <error>error message</error>

"http:method:: GET /results"

   Displays results list. The returned *200- OK* XML:

      <?xml version="1.0" ?>
      <collection href="/results" xmlns="http://127.0.0.1/cocoma">
              <items offset="0" total="5">
                      <results failedRuns="0" href="/results/1-Emu-CPU-RAM-IO" name="1-Emu-CPU-RAM-IO" state="inactive"/>
                      <results failedRuns="0" href="/results/2-CPU_EMU" name="2-CPU_EMU" state="inactive"/>
                      <results failedRuns="0" href="/results/3-CPU_EMU" name="3-CPU_EMU" state="inactive"/>
                      <results failedRuns="0" href="/results/4-CPU_EMU" name="4-CPU_EMU" state="inactive"/>
                      <results failedRuns="0" href="/results/5-CPU_EMU" name="5-CPU_EMU" state="inactive"/>
              </items>
              <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
      </collection>

"http:method:: GET /results/{name}"

      :arg name: Name of tests that you want to get more info

   Displays information about results by name. The returned *200- OK*
   XML:

      <?xml version="1.0" ?>
      <results href="/results/1-Emu-CPU-RAM-IO" xmlns="http://127.0.0.1/cocoma">
              <emulationName>1-Emu-CPU-RAM-IO</emulationName>
              <totalRuns>6</totalRuns>
              <executedRuns>6</executedRuns>
              <failedRuns>0</failedRuns>
              <emuState>inactive</emuState>
      </results>

"http:method:: GET /logs"

   Displays logs list. The returned *200- OK* XML:

      <?xml version="1.0" ?>
      <logs href="/logs">
              <link href="/logs/emulations" rel="emulations" type="application/vnd.bonfire+xml"/>
              <link href="/logs/system" rel="system" type="application/vnd.bonfire+xml"/>
      </logs>

"http:method:: GET /logs/system"

   Return Zip file with system logs.

"http:method:: GET /logs/emulations"

   Displays emulations logs list. The returned *200- OK* XML:

      <?xml version="1.0" ?>
      <collection href="/logs/emulations" xmlns="http://127.0.0.1/cocoma">
              <items offset="0" total="3">
                      <emulationLog href="/logs/emulations/3-CPU_EMU" name="3-CPU_EMU"/>
                      <emulationLog href="/logs/emulations/5-CPU_EMU" name="5-CPU_EMU"/>
                      <emulationLog href="/logs/emulations/4-CPU_EMU" name="4-CPU_EMU"/>
              </items>
              <link href="/" rel="parent" type="application/vnd.bonfire+xml"/>
              <link href="/logs" rel="parent" type="application/vnd.bonfire+xml"/>
      </collection>

"http:method:: GET /logs/{name}"

      :arg name: Name of emulation logs that you want to get

   Return Zip file with emulation logs.


XML payload structure
=====================

A COCOMA emulation is specified in XML. The user can directly create
the XML and send it to COCOMA through the CLI client or any REST
client. An Emulation must contain all the neccessary information about
starting time, duration, target resource and required resource usage.
Once the XML document is received by COCOMA, the framework
automatically schedules and executes the required workload on the
chosen resource(s), CPU, IO, Memory or Network.

Consider this sample XML document code:

   <emulation>
     <emuname>CPU_EMU</emuname>
     <emuType>Mix</emuType>
     <emuresourceType>CPU</emuresourceType>
     <!--date format: 2014-10-10T10:10:10 -->
     <emustartTime>now</emustartTime>
     <!--duration in seconds -->
     <emustopTime>60</emustopTime>

     <distributions>

      <name>CPU_Distro</name>
        <startTime>0</startTime>
        <!--duration in seconds -->
        <duration>60</duration>
        <granularity>20</granularity>
        <distribution href="/distributions/linear" name="linear" />
        <!--cpu utilization distribution range-->
         <startLoad>10</startLoad>
         <stopLoad>95</stopLoad>

         <emulator href="/emulators/lookbusy" name="lookbusy" />
         <emulator-params>
           <!--more parameters will be added -->
           <resourceType>CPU</resourceType>
          <!--Number of CPUs to keep busy (default: autodetected)-->
          <ncpus>0</ncpus>
         </emulator-params>

     </distributions>

     <log>
      <!-- Use value "1" to enable logging(by default logging is off)  -->
      <enable>1</enable>
      <!-- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  -->
      <frequency>1</frequency>
      <logLevel>debug</logLevel>
     </log>

   </emulation>

The XML document defines the emulation experiment details, which
consists of three blocks:

* **Emulation**

   <emulation>
     <emuname>CPU_EMU</emuname>
     <emuType>Mix</emuType>
     <emuresourceType>CPU</emuresourceType>
     <!--date format: 2014-10-10T10:10:10 -->
     <emustartTime>now</emustartTime>
     <!--duration in seconds -->
     <emustopTime>60</emustopTime>
     ...
   </emulation>

The 'emuresourceType' value is used for a check to ensure that all
distributions in an emulstion are of the specified type (CPU in this
case). For Emulations with multiple distributions over different
resource types use 'MIX'

* **Distribution**

     <distributions>

      <name>CPU_Distro</name>
        <startTime>0</startTime>
        <!--duration in seconds -->
        <duration>60</duration>
        <granularity>20</granularity>
        <distribution href="/distributions/linear" name="linear" />
        <!--cpu utilization distribution range-->
         <startLoad>10</startLoad>
         <stopLoad>95</stopLoad>

         <emulator href="/emulators/lookbusy" name="lookbusy" />
         <emulator-params>
           <!--more parameters will be added -->
           <resourceType>CPU</resourceType>
          <!--Number of CPUs to keep busy (default: autodetected)-->
          <ncpus>0</ncpus>
         </emulator-params>

     </distributions>

* **Log** (optional)

     <log>
      <!-- Use value "1" to enable logging(by default logging is off)  -->
      <enable>1</enable>
      <!-- Use seconds for setting probe intervals(if logging is enabled default is 3sec)  -->
      <frequency>1</frequency>
      <logLevel>debug</logLevel>
     </log>

In plain english it means - create an emulation named *CPU_EMU*
starting *now* and running for *60* sec. The Emulation includes one
distribution called *CPU_Distro*, which starts at the same time as
emulation, runs for *60* sec, using *linear* pattern. The pattern
increases the workload of the *CPU* from *10%* to *95%* in *20* steps
by using the *lookbusy* emulator. The workload produced by the
application is logged every second with debug level information.
